import { prisma } from '../prisma/prisma'
import { ServiceFactories } from './service-factories'
import type { StudyCard } from './llm-service-interface'

export class StudyCardsService {
  /**
   * Generate and save study cards for a given note
   * @param noteId The ID of the note to generate study cards for
   * @param noteTitle The title of the note
   * @param noteContent The content of the note
   * @returns Array of created study cards
   */
  static async generateAndSaveStudyCards(
    noteId: number,
    noteTitle: string,
    noteContent: string,
  ) {
    try {
      // Skip generation if content is too short or empty
      if (!noteContent.trim() || noteContent.trim().length < 20) {
        console.log('Note content too short for study card generation')
        return []
      }

      // Generate study cards using LLM service
      const llmService = ServiceFactories.createLLMService()
      const generatedCards = await llmService.generateStudyCards(
        noteTitle,
        noteContent,
      )

      if (generatedCards.length === 0) {
        console.log('No study cards generated by LLM service')
        return []
      }

      // Save generated study cards to database
      const studyCardsData = generatedCards.map((card: StudyCard) => ({
        question: card.question,
        answer: card.answer,
        subject: card.subject || noteTitle, // Use note title as fallback subject
        type: 'Card' as const,
        noteId: noteId,
      }))

      const createdCards = await prisma.$transaction(async (tx) => {
        // Remove existing study cards for this note
        await this.deleteStudyCardsForNote(noteId)

        return await tx.studyCards.createMany({
          data: studyCardsData,
        })
      })

      console.log(
        `Generated ${createdCards.count} study cards for note ${noteId}`,
      )
      return studyCardsData
    } catch (error) {
      console.error('Error generating study cards:', error)
      // Don't throw error to prevent note operations from failing
      return []
    }
  }

  /**
   * Delete all study cards associated with a note
   * @param noteId The ID of the note
   */
  static async deleteStudyCardsForNote(noteId: number) {
    try {
      const deleted = await prisma.studyCards.deleteMany({
        where: { noteId: noteId },
      })
      console.log(`Deleted ${deleted.count} study cards for note ${noteId}`)
      return deleted
    } catch (error) {
      console.error('Error deleting study cards:', error)
      return { count: 0 }
    }
  }

  /**
   * Get all study cards for a specific note
   * @param noteId The ID of the note
   * @returns Array of study cards
   */
  static async getStudyCardsForNote(noteId: number) {
    try {
      return await prisma.studyCards.findMany({
        where: { noteId: noteId },
        orderBy: { id: 'asc' },
      })
    } catch (error) {
      console.error('Error fetching study cards:', error)
      return []
    }
  }

  /**
   * Update study cards for a note (regenerate them)
   * @param noteId The ID of the note
   * @param noteTitle The updated title of the note
   * @param noteContent The updated content of the note
   * @returns Array of updated study cards
   */
  static async updateStudyCardsForNote(
    noteId: number,
    noteTitle: string,
    noteContent: string,
  ) {
    return await this.generateAndSaveStudyCards(noteId, noteTitle, noteContent)
  }
}
